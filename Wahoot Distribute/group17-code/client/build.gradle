plugins {
    id 'java'
    id 'application'
    id("org.openjfx.javafxplugin") version "0.1.0"
    id 'org.beryx.runtime' version '1.13.1'
}

group = 'wahoot'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

javafx {
    version = "21"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.media']
}

dependencies {
    implementation 'com.jfoenix:jfoenix:9.0.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.mockito:mockito-core:3.12.4' //Daniel - needed for test
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation project(":database")
}

test {
    useJUnitPlatform()
}

application {
    mainClass = "wahoot.client.Main"
    applicationName = "Wahoot"
}

test {
    useJUnitPlatform()
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.naming', 'java.xml', 'java.scripting', 'jdk.unsupported', 'java.sql', 'java.desktop']
    launcher {
        noConsole = true
    }
    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        appVersion = "1.0.1"
        imageName = 'Wahoot'
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/icons/wahoot-logo-icon-256.ico"]
        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'Wahoot', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'Wahoot']
            installerType = 'dmg'
        }
    }
}

jar {
    manifest {
        attributes(
            'Main-Class' : 'wahoot.client.Main'
        )
    }
}

tasks.jpackage.doFirst {
    def currentOs = org.gradle.internal.os.OperatingSystem.current()
    def basePath = currentOs.windows ? project.name : currentOs.linux ? "$project.name/lib" : "${project.name}.app/Contents"
    copy {
        from('src/main/resources')
        into("$buildDir/jpackage/$basePath/app")
    }
}